import { useEffect } from 'react'
import { Link, redirect } from "react-router-dom";
import { useMap } from '../../hooks/useMap'
import { useFetch } from '../../hooks/useFetch'
import { useLocalStorage } from '../../hooks/useLocalStorage'
import BaseInput from '../../components/base/BaseInput'
import AuthLayout from '../../layouts/auth'
import { STORAGE_AUTH_KEY } from '../../constants'

const SignUpPage = () => {
  const [token, setAuthToken] = useLocalStorage(STORAGE_AUTH_KEY)

  useEffect(() => {
    if (token) redirect('/')
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const fetchHook = useFetch()

  const [formData, { set }] = useMap({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    institution: '',
  })
  const fields = getFields(formData, set)

  function signUp(e) {
    e.preventDefault()

    // fetchHook('auth/sign-up', {
    //   method: 'POST',
    //   body: JSON.stringify(formData),
    // })
      // .then((token) => {
      //   setAuthToken(token)
      //   redirect('/')
      // })
      // .catch(err => {
      //   // Failed
      // })
  }

  return (
    <div className='sm:max-w-2xl'>
      {/* <Head>
        <title>Moksha | Sign up</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head> */}

      <form className="space-y-6" onSubmit={signUp}>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          { fields.map(field => <BaseInput key={ field.id } {...field} />) }
        </div>

        {/* <div className="flex items-center justify-end">
          <div className="text-sm">
            <Link href="#" className="font-medium text-amber-600 hover:text-amber-500">
              Forgot your password?
            </Link>
          </div>
        </div> */}

        <div>
          <button
            type="submit"
            className="flex w-full justify-center rounded-md border border-transparent bg-amber-700 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2"
          >
            Sign up
          </button>
        </div>

        <div className="flex items-center justify-start">
          <div className="text-sm">
            <span className="text-gray-100">Already have an account?</span>{' '}
            <Link to="/auth/login">
              <span className="font-medium text-amber-600 cursor-pointer">Login</span>
            </Link>
          </div>
        </div>
      </form>
    </div>
  )
}
SignUpPage.getLayout = (page) => <AuthLayout heading="Create your account">{page}</AuthLayout>
export default SignUpPage

const getFields = (formData, set) => {
  const fields = [
    {
      id: "name",
      name: "name",
      type: "text",
      autoComplete: "name",
      required: true,
      label: "Name",
      value: formData.name,
      onChange: e => set('name', e.target.value),
    },
    {
      id: "institution",
      name: "institution",
      type: "text",
      autoComplete: "organization",
      required: true,
      label: "Institution",
      value: formData.institution,
      onChange: e => set('institution', e.target.value),
    },
    {
      id: "email",
      name: "email",
      type: "email",
      autoComplete: "email",
      required: true,
      label: "Email address",
      value: formData.email,
      onChange: e => set('email', e.target.value),
    },
    {
      id: "password",
      name: "password",
      type: "password",
      autoComplete: "new-password",
      required: true,
      minLength: 8,
      maxLength: 30,
      label: "Password",
      value: formData.password,
      onChange: e => set('password', e.target.value),
    },
    {
      id: "confirm-password",
      name: "confirm-password",
      type: "password",
      autoComplete: "new-password",
      required: true,
      label: "Confirm password",
      value: formData.confirmPassword,
      onChange: e => set('confirmPassword', e.target.value),
    },
  ]
  return fields
}
